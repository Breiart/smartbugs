'solc --version' running
'solc /sb/0x0a2d553217e92c6553334723f0669cc3f61fd569.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/sb' running
Compilation warnings/errors on /sb/0x0a2d553217e92c6553334723f0669cc3f61fd569.sol:
/sb/0x0a2d553217e92c6553334723f0669cc3f61fd569.sol:54:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
  function LowRiskBag() public {
  ^ (Relevant source part starts here and spans across multiple lines).
/sb/0x0a2d553217e92c6553334723f0669cc3f61fd569.sol:90:5: Warning: Invoking events without "emit" prefix is deprecated.
    Transfer(currentOwner, msg.sender, currentPrice);
    ^----------------------------------------------^
/sb/0x0a2d553217e92c6553334723f0669cc3f61fd569.sol:124:5: Warning: Invoking events without "emit" prefix is deprecated.
    NewRound();
    ^--------^
/sb/0x0a2d553217e92c6553334723f0669cc3f61fd569.sol:129:20: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member, for example use "address(contract).balance" instead.
    uint balance = this.balance;
                   ^----------^
/sb/0x0a2d553217e92c6553334723f0669cc3f61fd569.sol:138:15: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member, for example use "address(contract).balance" instead.
    balance = this.balance;
              ^----------^


LowRiskBag.getCurrentData() (../../sb/0x0a2d553217e92c6553334723f0669cc3f61fd569.sol#103-113) performs a multiplication on the result of a division:
	- pool = tokenPrice.mul(50).div(110).mul(85).div(100) (../../sb/0x0a2d553217e92c6553334723f0669cc3f61fd569.sol#105)
LowRiskBag.finishRound() (../../sb/0x0a2d553217e92c6553334723f0669cc3f61fd569.sol#115-125) performs a multiplication on the result of a division:
	- payout = tokenPrice.mul(50).div(110).mul(85).div(100) (../../sb/0x0a2d553217e92c6553334723f0669cc3f61fd569.sol#119)
LowRiskBag.payout(uint256) (../../sb/0x0a2d553217e92c6553334723f0669cc3f61fd569.sol#127-135) performs a multiplication on the result of a division:
	- balance -= tokenPrice.mul(50).div(110).mul(85).div(100) (../../sb/0x0a2d553217e92c6553334723f0669cc3f61fd569.sol#131)
LowRiskBag.getBalance() (../../sb/0x0a2d553217e92c6553334723f0669cc3f61fd569.sol#137-142) performs a multiplication on the result of a division:
	- balance -= tokenPrice.mul(50).div(110).mul(85).div(100) (../../sb/0x0a2d553217e92c6553334723f0669cc3f61fd569.sol#140)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply

LowRiskBag.getCurrentData() (../../sb/0x0a2d553217e92c6553334723f0669cc3f61fd569.sol#103-113) uses a dangerous strict equality:
	- getBlocksToNextRound() == 0 (../../sb/0x0a2d553217e92c6553334723f0669cc3f61fd569.sol#109)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities

LowRiskBag.finishRound().payout (../../sb/0x0a2d553217e92c6553334723f0669cc3f61fd569.sol#119) shadows:
	- LowRiskBag.payout(uint256) (../../sb/0x0a2d553217e92c6553334723f0669cc3f61fd569.sol#127-135) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing

LowRiskBag.changeStartPrice(uint256) (../../sb/0x0a2d553217e92c6553334723f0669cc3f61fd569.sol#65-68) should emit an event for: 
	- tokenStartPrice = price (../../sb/0x0a2d553217e92c6553334723f0669cc3f61fd569.sol#67) 
LowRiskBag.changeNewRoundDelay(uint256) (../../sb/0x0a2d553217e92c6553334723f0669cc3f61fd569.sol#70-73) should emit an event for: 
	- newRoundDelay = delay (../../sb/0x0a2d553217e92c6553334723f0669cc3f61fd569.sol#72) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic

LowRiskBag.changeContractOwner(address).newOwner (../../sb/0x0a2d553217e92c6553334723f0669cc3f61fd569.sol#61) lacks a zero-check on :
		- contractOwner = newOwner (../../sb/0x0a2d553217e92c6553334723f0669cc3f61fd569.sol#63)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

Version constraint ^0.4.18 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- DirtyBytesArrayToStorage
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- privateCanBeOverridden
	- SignedArrayStorageCopy
	- ABIEncoderV2StorageArrayWithMultiSlotElement
	- DynamicConstructorArgumentsClippedABIV2
	- UninitializedFunctionPointerInConstructor_0.4.x
	- IncorrectEventSignatureInLibraries_0.4.x
	- ExpExponentCleanup
	- EventStructWrongData
	- NestedArrayFunctionCallDecoder.
It is used by:
	- ^0.4.18 (../../sb/0x0a2d553217e92c6553334723f0669cc3f61fd569.sol#1)
solc-0.4.26 is an outdated solc version. Use a more recent version (at least 0.8.0), if possible.
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Reentrancy in LowRiskBag.finishRound() (../../sb/0x0a2d553217e92c6553334723f0669cc3f61fd569.sol#115-125):
	External calls:
	- owner.transfer(payout) (../../sb/0x0a2d553217e92c6553334723f0669cc3f61fd569.sol#123)
	Event emitted after the call(s):
	- NewRound() (../../sb/0x0a2d553217e92c6553334723f0669cc3f61fd569.sol#124)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4
/sb/0x0a2d553217e92c6553334723f0669cc3f61fd569.sol analyzed (2 contracts with 93 detectors), 12 result(s) found
