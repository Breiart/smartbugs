{
    "docker": {
        "detach": true,
        "entrypoint": "'/sb/bin/do_solidity.sh' '/sb/0x752ff65b884b9c260d212c804e0b7aceea012473.sol' '/sb/bin' ''",
        "image": "smartbugs/securify:usolc",
        "user": 0,
        "volumes": {
            "/tmp/tmp_dphed71": {
                "bind": "/sb",
                "mode": "rw"
            }
        }
    },
    "filename": "samples/SmartbugsWild/0x752ff65b884b9c260d212c804e0b7aceea012473.sol",
    "platform": {
        "cpu": "Intel(R) Core(TM) i7-8550U CPU @ 1.80GHz",
        "python": "3.12.3.final.0 (64 bit)",
        "release": "6.14.0-29-generic",
        "smartbugs": "2.0.10",
        "system": "Linux",
        "version": "#29~24.04.1-Ubuntu SMP PREEMPT_DYNAMIC Thu Aug 14 16:52:50 UTC 2"
    },
    "result": {
        "duration": 30.805052757263184,
        "exit_code": null,
        "logs": null,
        "output": "result.tar",
        "start": 1758467106.2766275
    },
    "runid": "d_20250918_2233",
    "solc": "0.4.24",
    "tool": {
        "bin": "scripts",
        "command": null,
        "cpu_quota": null,
        "default_params": "",
        "entrypoint": "'$BIN/do_solidity.sh' '$FILENAME' '$BIN' '$ARGS'",
        "id": "securify",
        "image": "smartbugs/securify:usolc",
        "info": "Securify uses formal verification, also relying on static analysis checks. Securify's analysis consists of two steps. First, it symbolically analyzes the contract's dependency graph to extract precise semantic information from the code. Then, it checks compliance and violation patterns that capture sufficient conditions for proving if a property holds or not.",
        "mem_limit": null,
        "mode": "solidity",
        "name": "Securify",
        "origin": "https://github.com/eth-sri/securify",
        "output": "/results/",
        "parser": "parser.py",
        "solc": true,
        "version": null
    },
    "tool_args": ""
}
