'solc --version' running
'solc /sb/open_address_lottery.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/sb' running
Compilation warnings/errors on /sb/open_address_lottery.sol:
/sb/open_address_lottery.sol:41:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function OpenAddressLottery() {
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/open_address_lottery.sol:91:9: Warning: Variable is declared as a storage pointer. Use an explicit "storage" keyword to silence this warning.
        SeedComponents s;
        ^--------------^
/sb/open_address_lottery.sol:58:20: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member, for example use "address(contract).balance" instead.
            if(win>this.balance) //if the balance isnt sufficient...
                   ^----------^
/sb/open_address_lottery.sol:59:21: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member, for example use "address(contract).balance" instead.
                win=this.balance; //...send everything we've got
                    ^----------^
/sb/open_address_lottery.sol:69:18: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        n = uint(keccak256(uint(addr), secretSeed)[0]) % 8;
                 ^-------------------------------^
/sb/open_address_lottery.sol:73:30: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        secretSeed = uint256(keccak256(
                             ^ (Relevant source part starts here and spans across multiple lines).
/sb/open_address_lottery.sol:91:9: Warning: Uninitialized storage pointer. Did you mean '<type> memory s'?
        SeedComponents s;
        ^--------------^
/sb/open_address_lottery.sol:41:5: Warning: No visibility specified. Defaulting to "public". 
    function OpenAddressLottery() {
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/open_address_lottery.sol:46:5: Warning: No visibility specified. Defaulting to "public". 
    function participate() payable {
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/open_address_lottery.sol:67:5: Warning: No visibility specified. Defaulting to "public". 
    function luckyNumberOfAddress(address addr) constant returns(uint n){
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/open_address_lottery.sol:82:5: Warning: No visibility specified. Defaulting to "public". 
    function kill() {
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/open_address_lottery.sol:88:5: Warning: No visibility specified. Defaulting to "public". 
    function forceReseed() { //reseed initiated by the owner - for testing purposes
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/open_address_lottery.sol:93:32: Warning: "block.blockhash()" has been deprecated in favor of "blockhash()"
        s.component2 = uint256(block.blockhash(block.number - 1));
                               ^-------------^
/sb/open_address_lottery.sol:100:5: Warning: No visibility specified. Defaulting to "public". 
    function () payable { //if someone sends money without any function call, just assume he wanted to participate
    ^ (Relevant source part starts here and spans across multiple lines).


OpenAddressLottery.luckyNumberOfAddress(address) (../../sb/open_address_lottery.sol#67-70) uses a weak PRNG: "n = uint256(keccak256()(uint256(addr),secretSeed)[0]) % 8 (../../sb/open_address_lottery.sol#69)" 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#weak-PRNG

OpenAddressLottery.forceReseed().s (../../sb/open_address_lottery.sol#91) is a storage variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-storage-variables

OpenAddressLottery.participate() (../../sb/open_address_lottery.sol#46-65) uses a dangerous strict equality:
	- luckyNumberOfAddress(msg.sender) == LuckyNumber (../../sb/open_address_lottery.sol#53)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities

OpenAddressLottery.participate() (../../sb/open_address_lottery.sol#46-65) uses timestamp for comparisons
	Dangerous comparisons:
	- luckyNumberOfAddress(msg.sender) == LuckyNumber (../../sb/open_address_lottery.sol#53)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

OpenAddressLottery.participate() (../../sb/open_address_lottery.sol#46-65) compares to a boolean constant:
	-require(bool)(winner[msg.sender] == false) (../../sb/open_address_lottery.sol#51)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality

Deprecated standard detected s.component2 = uint256(block.blockhash(block.number - 1)) (../../sb/open_address_lottery.sol#93):
	- Usage of "block.blockhash()" should be replaced with "blockhash()"
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#deprecated-standards

Version constraint ^0.4.19 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- DirtyBytesArrayToStorage
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- privateCanBeOverridden
	- SignedArrayStorageCopy
	- ABIEncoderV2StorageArrayWithMultiSlotElement
	- DynamicConstructorArgumentsClippedABIV2
	- UninitializedFunctionPointerInConstructor_0.4.x
	- IncorrectEventSignatureInLibraries_0.4.x
	- ABIEncoderV2PackedStorage_0.4.x
	- ExpExponentCleanup
	- EventStructWrongData
	- NestedArrayFunctionCallDecoder.
It is used by:
	- ^0.4.19 (../../sb/open_address_lottery.sol#6)
solc-0.4.26 is an outdated solc version. Use a more recent version (at least 0.8.0), if possible.
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Variable OpenAddressLottery.LuckyNumber (../../sb/open_address_lottery.sol#37) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Reentrancy in OpenAddressLottery.participate() (../../sb/open_address_lottery.sol#46-65):
	External calls:
	- msg.sender.transfer(win) (../../sb/open_address_lottery.sol#60)
	State variables written after the call(s):
	- reseed(SeedComponents(uint256(block.coinbase),block.difficulty,block.gaslimit,block.timestamp)) (../../sb/open_address_lottery.sol#64)
		- lastReseed = block.number (../../sb/open_address_lottery.sol#79)
	- reseed(SeedComponents(uint256(block.coinbase),block.difficulty,block.gaslimit,block.timestamp)) (../../sb/open_address_lottery.sol#64)
		- secretSeed = uint256(keccak256()(components.component1,components.component2,components.component3,components.component4)) (../../sb/open_address_lottery.sol#73-78)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4

OpenAddressLottery.LuckyNumber (../../sb/open_address_lottery.sol#37) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant
/sb/open_address_lottery.sol analyzed (1 contracts with 93 detectors), 11 result(s) found
