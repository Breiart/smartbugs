'solc --version' running
'solc /sb/smart_billions.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/sb' running
Compilation warnings/errors on /sb/smart_billions.sol:
/sb/smart_billions.sol:85:5: Warning: Use of the "var" keyword is deprecated.
    var _allowance = allowed[_from][msg.sender];
    ^------------^
/sb/smart_billions.sol:182:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function SmartBillions() {
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/smart_billions.sol:57:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(msg.sender, owner, _value);
        ^---------------------------------^
/sb/smart_billions.sol:62:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(msg.sender, _to, _value);
        ^-------------------------------^
/sb/smart_billions.sol:91:5: Warning: Invoking events without "emit" prefix is deprecated.
    Transfer(_from, _to, _value);
    ^--------------------------^
/sb/smart_billions.sol:102:5: Warning: Invoking events without "emit" prefix is deprecated.
    Approval(msg.sender, _spender, _value);
    ^------------------------------------^
/sb/smart_billions.sol:318:32: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member, for example use "address(contract).balance" instead.
        require(_amount > 0 && this.balance >= (investBalance * 9 / 10) + walletBalance + _amount);
                               ^----------^
/sb/smart_billions.sol:320:33: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member, for example use "address(contract).balance" instead.
            require((_amount <= this.balance / 400) && coldStoreLast + 4 * 60 * 24 * 7 <= block.number);
                                ^----------^
/sb/smart_billions.sol:370:23: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member, for example use "address(contract).balance" instead.
        uint maxpay = this.balance / 2;
                      ^----------^
/sb/smart_billions.sol:427:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(address(0),msg.sender,senderBalance); // for etherscan
        ^-------------------------------------------^
/sb/smart_billions.sol:428:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(address(0),owner,ownerBalance); // for etherscan
        ^-------------------------------------^
/sb/smart_billions.sol:429:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(address(0),animator,animatorBalance); // for etherscan
        ^-------------------------------------------^
/sb/smart_billions.sol:430:9: Warning: Invoking events without "emit" prefix is deprecated.
        LogInvestment(msg.sender,_partner,investing);
        ^------------------------------------------^
/sb/smart_billions.sol:440:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(msg.sender,address(0),balances[msg.sender]); // for etherscan
        ^--------------------------------------------------^
/sb/smart_billions.sol:477:9: Warning: Invoking events without "emit" prefix is deprecated.
        LogDividend(_who,balance,last);
        ^----------------------------^
/sb/smart_billions.sol:552:13: Warning: Invoking events without "emit" prefix is deprecated.
            LogLate(msg.sender,player.blockNum,block.number);
            ^----------------------------------------------^
/sb/smart_billions.sol:574:17: Warning: Invoking events without "emit" prefix is deprecated.
                LogLate(msg.sender,player.blockNum,block.number);
                ^----------------------------------------------^
/sb/smart_billions.sol:581:13: Warning: Invoking events without "emit" prefix is deprecated.
            LogWin(msg.sender,uint(player.betHash),uint(hash),prize);
            ^------------------------------------------------------^
/sb/smart_billions.sol:584:17: Warning: Invoking events without "emit" prefix is deprecated.
                LogRecordWin(msg.sender,prize);
                ^----------------------------^
/sb/smart_billions.sol:589:13: Warning: Invoking events without "emit" prefix is deprecated.
            LogLoss(msg.sender,uint(player.betHash),uint(hash));
            ^-------------------------------------------------^
/sb/smart_billions.sol:618:32: Warning: "sha3" has been deprecated in favour of "keccak256"
        return playSystem(uint(sha3(msg.sender,block.number)), address(0));
                               ^---------------------------^
/sb/smart_billions.sol:618:32: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return playSystem(uint(sha3(msg.sender,block.number)), address(0));
                               ^---------------------------^
/sb/smart_billions.sol:626:32: Warning: "sha3" has been deprecated in favour of "keccak256"
        return playSystem(uint(sha3(msg.sender,block.number)), _partner);
                               ^---------------------------^
/sb/smart_billions.sol:626:32: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return playSystem(uint(sha3(msg.sender,block.number)), _partner);
                               ^---------------------------^
/sb/smart_billions.sol:660:13: Warning: Invoking events without "emit" prefix is deprecated.
            LogBet(msg.sender,uint(bethash),hashNext,msg.value);
            ^-------------------------------------------------^
/sb/smart_billions.sol:25:3: Warning: No visibility specified. Defaulting to "public". 
  function balanceOf(address who) constant returns (uint);
  ^------------------------------------------------------^
/sb/smart_billions.sol:26:3: Warning: No visibility specified. Defaulting to "public". 
  function transfer(address to, uint value);
  ^----------------------------------------^
/sb/smart_billions.sol:32:3: Warning: No visibility specified. Defaulting to "public". 
  function allowance(address owner, address spender) constant returns (uint);
  ^-------------------------------------------------------------------------^
/sb/smart_billions.sol:33:3: Warning: No visibility specified. Defaulting to "public". 
  function transferFrom(address from, address to, uint value);
  ^----------------------------------------------------------^
/sb/smart_billions.sol:34:3: Warning: No visibility specified. Defaulting to "public". 
  function approve(address spender, uint value);
  ^--------------------------------------------^
/sb/smart_billions.sol:51:3: Warning: No visibility specified. Defaulting to "public". 
  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {
  ^ (Relevant source part starts here and spans across multiple lines).
/sb/smart_billions.sol:70:3: Warning: No visibility specified. Defaulting to "public". 
  function balanceOf(address _owner) constant returns (uint balance) {
  ^ (Relevant source part starts here and spans across multiple lines).
/sb/smart_billions.sol:84:3: Warning: No visibility specified. Defaulting to "public". 
  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {
  ^ (Relevant source part starts here and spans across multiple lines).
/sb/smart_billions.sol:98:3: Warning: No visibility specified. Defaulting to "public". 
  function approve(address _spender, uint _value) {
  ^ (Relevant source part starts here and spans across multiple lines).
/sb/smart_billions.sol:110:3: Warning: No visibility specified. Defaulting to "public". 
  function allowance(address _owner, address _spender) constant returns (uint remaining) {
  ^ (Relevant source part starts here and spans across multiple lines).
/sb/smart_billions.sol:182:5: Warning: No visibility specified. Defaulting to "public". 
    function SmartBillions() {
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/smart_billions.sol:523:43: Warning: "block.blockhash()" has been deprecated in favor of "blockhash()"
            return(betPrize(player,uint24(block.blockhash(player.blockNum))));
                                          ^-------------^
/sb/smart_billions.sol:560:27: Warning: "block.blockhash()" has been deprecated in favor of "blockhash()"
            hash = uint24(block.blockhash(player.blockNum));
                          ^-------------^
/sb/smart_billions.sol:700:24: Warning: "block.blockhash()" has been deprecated in favor of "blockhash()"
        return( ( uint(block.blockhash(_lastb  )) & 0xFFFFFF )
                       ^-------------^
/sb/smart_billions.sol:702:24: Warning: "block.blockhash()" has been deprecated in favor of "blockhash()"
            | ( ( uint(block.blockhash(_lastb+1)) & 0xFFFFFF ) << 24 )
                       ^-------------^
/sb/smart_billions.sol:704:24: Warning: "block.blockhash()" has been deprecated in favor of "blockhash()"
            | ( ( uint(block.blockhash(_lastb+2)) & 0xFFFFFF ) << 48 )
                       ^-------------^
/sb/smart_billions.sol:706:24: Warning: "block.blockhash()" has been deprecated in favor of "blockhash()"
            | ( ( uint(block.blockhash(_lastb+3)) & 0xFFFFFF ) << 72 )
                       ^-------------^
/sb/smart_billions.sol:708:24: Warning: "block.blockhash()" has been deprecated in favor of "blockhash()"
            | ( ( uint(block.blockhash(_lastb+4)) & 0xFFFFFF ) << 96 )
                       ^-------------^
/sb/smart_billions.sol:710:24: Warning: "block.blockhash()" has been deprecated in favor of "blockhash()"
            | ( ( uint(block.blockhash(_lastb+5)) & 0xFFFFFF ) << 120 )
                       ^-------------^
/sb/smart_billions.sol:712:24: Warning: "block.blockhash()" has been deprecated in favor of "blockhash()"
            | ( ( uint(block.blockhash(_lastb+6)) & 0xFFFFFF ) << 144 )
                       ^-------------^
/sb/smart_billions.sol:714:24: Warning: "block.blockhash()" has been deprecated in favor of "blockhash()"
            | ( ( uint(block.blockhash(_lastb+7)) & 0xFFFFFF ) << 168 )
                       ^-------------^
/sb/smart_billions.sol:716:24: Warning: "block.blockhash()" has been deprecated in favor of "blockhash()"
            | ( ( uint(block.blockhash(_lastb+8)) & 0xFFFFFF ) << 192 )
                       ^-------------^
/sb/smart_billions.sol:718:24: Warning: "block.blockhash()" has been deprecated in favor of "blockhash()"
            | ( ( uint(block.blockhash(_lastb+9)) & 0xFFFFFF ) << 216 )
                       ^-------------^
/sb/smart_billions.sol:10:3: Warning: Function state mutability can be restricted to pure
  function sub(uint a, uint b) internal returns (uint) {
  ^ (Relevant source part starts here and spans across multiple lines).
/sb/smart_billions.sol:14:3: Warning: Function state mutability can be restricted to pure
  function add(uint a, uint b) internal returns (uint) {
  ^ (Relevant source part starts here and spans across multiple lines).
/sb/smart_billions.sol:482:5: Warning: Function state mutability can be restricted to pure
    function betPrize(Bet _player, uint24 _hash) constant private returns (uint) { // house fee 13.85%
    ^ (Relevant source part starts here and spans across multiple lines).


SmartBillions (../../sb/smart_billions.sol#118-771) contract sets array length with a user-controlled value:
	- dividends.push(0) (../../sb/smart_billions.sol#186)
SmartBillions (../../sb/smart_billions.sol#118-771) contract sets array length with a user-controlled value:
	- dividends.push(0) (../../sb/smart_billions.sol#346)
SmartBillions (../../sb/smart_billions.sol#118-771) contract sets array length with a user-controlled value:
	- dividends.push(0) (../../sb/smart_billions.sol#187)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#array-length-assignment

SmartBillions.invest(address) (../../sb/smart_billions.sol#399-431) performs a multiplication on the result of a division:
	- walletBalance += (investing * 5 / 100) * 2 (../../sb/smart_billions.sol#416)
SmartBillions.commitDividend(address) (../../sb/smart_billions.sol#459-478) performs a multiplication on the result of a division:
	- share = balances[_who] * 0xffffffff / totalSupply (../../sb/smart_billions.sol#468)
	- balance += share * dividends[last] (../../sb/smart_billions.sol#471)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply

SmartBillions (../../sb/smart_billions.sol#118-771) has incorrect ERC20 function interface:StandardToken.transferFrom(address,address,uint256) (../../sb/smart_billions.sol#84-92)
SmartBillions (../../sb/smart_billions.sol#118-771) has incorrect ERC20 function interface:StandardToken.approve(address,uint256) (../../sb/smart_billions.sol#98-103)
SmartBillions (../../sb/smart_billions.sol#118-771) has incorrect ERC20 function interface:ERC20.transferFrom(address,address,uint256) (../../sb/smart_billions.sol#33)
SmartBillions (../../sb/smart_billions.sol#118-771) has incorrect ERC20 function interface:ERC20.approve(address,uint256) (../../sb/smart_billions.sol#34)
SmartBillions (../../sb/smart_billions.sol#118-771) has incorrect ERC20 function interface:ERC20Basic.transfer(address,uint256) (../../sb/smart_billions.sol#26)
SmartBillions (../../sb/smart_billions.sol#118-771) has incorrect ERC20 function interface:BasicToken.transfer(address,uint256) (../../sb/smart_billions.sol#51-64)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-erc20-interface

SmartBillions.addHashes(uint256) (../../sb/smart_billions.sol#672-689) uses a dangerous strict equality:
	- require(bool)(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize) (../../sb/smart_billions.sol#673)
SmartBillions.betOf(address) (../../sb/smart_billions.sol#513-535) uses a dangerous strict equality:
	- (player.value == 0) || (player.blockNum <= 1) || (block.number < player.blockNum) || (block.number >= player.blockNum + (10 * hashesSize)) (../../sb/smart_billions.sol#515-518)
SmartBillions.betOf(address) (../../sb/smart_billions.sol#513-535) uses a dangerous strict equality:
	- hash == 0x1000000 (../../sb/smart_billions.sol#527)
SmartBillions.betPrize(SmartBillions.Bet,uint24) (../../sb/smart_billions.sol#482-508) uses a dangerous strict equality:
	- (hit & 0xF00000) == 0 (../../sb/smart_billions.sol#485-491)
SmartBillions.putHash() (../../sb/smart_billions.sol#735-756) uses a dangerous strict equality:
	- lastb == 0 || block.number <= lastb + 10 (../../sb/smart_billions.sol#737)
SmartBillions.won() (../../sb/smart_billions.sol#540-591) uses a dangerous strict equality:
	- player.blockNum == 0 (../../sb/smart_billions.sol#542)
SmartBillions.won() (../../sb/smart_billions.sol#540-591) uses a dangerous strict equality:
	- (player.value == 0) || (player.blockNum == 1) (../../sb/smart_billions.sol#546)
SmartBillions.won() (../../sb/smart_billions.sol#540-591) uses a dangerous strict equality:
	- hash == 0x1000000 (../../sb/smart_billions.sol#566)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities

ERC20.allowance(address,address).owner (../../sb/smart_billions.sol#32) shadows:
	- ERC20Basic.owner (../../sb/smart_billions.sol#23) (state variable)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing

SmartBillions.changeOwner(address) (../../sb/smart_billions.sol#267-272) should emit an event for: 
	- owner = _who (../../sb/smart_billions.sol#271) 
SmartBillions.changeAnimator(address) (../../sb/smart_billions.sol#278-283) should emit an event for: 
	- animator = _who (../../sb/smart_billions.sol#282) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-access-control

SmartBillions.setInvestStart(uint256) (../../sb/smart_billions.sol#289-292) should emit an event for: 
	- investStart = _when (../../sb/smart_billions.sol#291) 
SmartBillions.setBetMax(uint256) (../../sb/smart_billions.sol#298-300) should emit an event for: 
	- hashBetMax = _maxsum (../../sb/smart_billions.sol#299) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic

SmartBillions.putHash() (../../sb/smart_billions.sol#735-756) has costly operations inside a loop:
	- hashLast = lastb + 10 (../../sb/smart_billions.sol#754)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop

Deprecated standard detected (betPrize(player,uint24(block.blockhash(player.blockNum)))) (../../sb/smart_billions.sol#523):
	- Usage of "block.blockhash()" should be replaced with "blockhash()"
Deprecated standard detected hash = uint24(block.blockhash(player.blockNum)) (../../sb/smart_billions.sol#560):
	- Usage of "block.blockhash()" should be replaced with "blockhash()"
Deprecated standard detected playSystem(uint256(sha3()(msg.sender,block.number)),address(0)) (../../sb/smart_billions.sol#618):
	- Usage of "sha3()" should be replaced with "keccak256()"
Deprecated standard detected playSystem(uint256(sha3()(msg.sender,block.number)),_partner) (../../sb/smart_billions.sol#626):
	- Usage of "sha3()" should be replaced with "keccak256()"
Deprecated standard detected ((uint256(block.blockhash(_lastb)) & 0xFFFFFF) | ((uint256(block.blockhash(_lastb + 1)) & 0xFFFFFF) << 24) | ((uint256(block.blockhash(_lastb + 2)) & 0xFFFFFF) << 48) | ((uint256(block.blockhash(_lastb + 3)) & 0xFFFFFF) << 72) | ((uint256(block.blockhash(_lastb + 4)) & 0xFFFFFF) << 96) | ((uint256(block.blockhash(_lastb + 5)) & 0xFFFFFF) << 120) | ((uint256(block.blockhash(_lastb + 6)) & 0xFFFFFF) << 144) | ((uint256(block.blockhash(_lastb + 7)) & 0xFFFFFF) << 168) | ((uint256(block.blockhash(_lastb + 8)) & 0xFFFFFF) << 192) | ((uint256(block.blockhash(_lastb + 9)) & 0xFFFFFF) << 216) | ((uint256(_delta) / hashesSize) << 240)) (../../sb/smart_billions.sol#700-719):
	- Usage of "block.blockhash()" should be replaced with "blockhash()"
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#deprecated-standards

Version constraint ^0.4.13 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- DirtyBytesArrayToStorage
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- privateCanBeOverridden
	- SignedArrayStorageCopy
	- UninitializedFunctionPointerInConstructor_0.4.x
	- IncorrectEventSignatureInLibraries_0.4.x
	- ExpExponentCleanup
	- NestedArrayFunctionCallDecoder
	- ZeroFunctionSelector
	- DelegateCallReturnValue
	- ECRecoverMalformedInput.
It is used by:
	- ^0.4.13 (../../sb/smart_billions.sol#7)
solc-0.4.26 is an outdated solc version. Use a more recent version (at least 0.8.0), if possible.
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Parameter BasicToken.transfer(address,uint256)._to (../../sb/smart_billions.sol#51) is not in mixedCase
Parameter BasicToken.transfer(address,uint256)._value (../../sb/smart_billions.sol#51) is not in mixedCase
Parameter BasicToken.balanceOf(address)._owner (../../sb/smart_billions.sol#70) is not in mixedCase
Parameter StandardToken.transferFrom(address,address,uint256)._from (../../sb/smart_billions.sol#84) is not in mixedCase
Parameter StandardToken.transferFrom(address,address,uint256)._to (../../sb/smart_billions.sol#84) is not in mixedCase
Parameter StandardToken.transferFrom(address,address,uint256)._value (../../sb/smart_billions.sol#84) is not in mixedCase
Parameter StandardToken.approve(address,uint256)._spender (../../sb/smart_billions.sol#98) is not in mixedCase
Parameter StandardToken.approve(address,uint256)._value (../../sb/smart_billions.sol#98) is not in mixedCase
Parameter StandardToken.allowance(address,address)._owner (../../sb/smart_billions.sol#110) is not in mixedCase
Parameter StandardToken.allowance(address,address)._spender (../../sb/smart_billions.sol#110) is not in mixedCase
Parameter SmartBillions.walletBalanceOf(address)._owner (../../sb/smart_billions.sol#203) is not in mixedCase
Parameter SmartBillions.walletPeriodOf(address)._owner (../../sb/smart_billions.sol#211) is not in mixedCase
Parameter SmartBillions.walletBlockOf(address)._owner (../../sb/smart_billions.sol#219) is not in mixedCase
Parameter SmartBillions.betValueOf(address)._owner (../../sb/smart_billions.sol#227) is not in mixedCase
Parameter SmartBillions.betHashOf(address)._owner (../../sb/smart_billions.sol#235) is not in mixedCase
Parameter SmartBillions.betBlockNumberOf(address)._owner (../../sb/smart_billions.sol#243) is not in mixedCase
Parameter SmartBillions.changeOwner(address)._who (../../sb/smart_billions.sol#267) is not in mixedCase
Parameter SmartBillions.changeAnimator(address)._who (../../sb/smart_billions.sol#278) is not in mixedCase
Parameter SmartBillions.setInvestStart(uint256)._when (../../sb/smart_billions.sol#289) is not in mixedCase
Parameter SmartBillions.setBetMax(uint256)._maxsum (../../sb/smart_billions.sol#298) is not in mixedCase
Parameter SmartBillions.coldStore(uint256)._amount (../../sb/smart_billions.sol#316) is not in mixedCase
Parameter SmartBillions.pay(uint256)._amount (../../sb/smart_billions.sol#369) is not in mixedCase
Parameter SmartBillions.invest(address)._partner (../../sb/smart_billions.sol#399) is not in mixedCase
Parameter SmartBillions.commitDividend(address)._who (../../sb/smart_billions.sol#459) is not in mixedCase
Parameter SmartBillions.betPrize(SmartBillions.Bet,uint24)._player (../../sb/smart_billions.sol#482) is not in mixedCase
Parameter SmartBillions.betPrize(SmartBillions.Bet,uint24)._hash (../../sb/smart_billions.sol#482) is not in mixedCase
Parameter SmartBillions.betOf(address)._who (../../sb/smart_billions.sol#513) is not in mixedCase
Parameter SmartBillions.playRandom(address)._partner (../../sb/smart_billions.sol#625) is not in mixedCase
Parameter SmartBillions.playSystem(uint256,address)._hash (../../sb/smart_billions.sol#633) is not in mixedCase
Parameter SmartBillions.playSystem(uint256,address)._partner (../../sb/smart_billions.sol#633) is not in mixedCase
Parameter SmartBillions.addHashes(uint256)._sadd (../../sb/smart_billions.sol#672) is not in mixedCase
Parameter SmartBillions.calcHashes(uint32,uint32)._lastb (../../sb/smart_billions.sol#698) is not in mixedCase
Parameter SmartBillions.calcHashes(uint32,uint32)._delta (../../sb/smart_billions.sol#698) is not in mixedCase
Parameter SmartBillions.getHash(uint256)._block (../../sb/smart_billions.sol#722) is not in mixedCase
Parameter SmartBillions.putHashes(uint256)._num (../../sb/smart_billions.sol#762) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Reentrancy in SmartBillions.coldStore(uint256) (../../sb/smart_billions.sol#316-324):
	External calls:
	- msg.sender.transfer(_amount) (../../sb/smart_billions.sol#322)
	State variables written after the call(s):
	- coldStoreLast = block.number (../../sb/smart_billions.sol#323)
Reentrancy in SmartBillions.invest(address) (../../sb/smart_billions.sol#399-431):
	External calls:
	- msg.sender.transfer(msg.value.sub(investing)) (../../sb/smart_billions.sol#407)
	State variables written after the call(s):
	- balances[msg.sender] += senderBalance (../../sb/smart_billions.sol#423)
	- balances[owner] += ownerBalance (../../sb/smart_billions.sol#424)
	- balances[animator] += animatorBalance (../../sb/smart_billions.sol#425)
	- totalSupply += senderBalance + ownerBalance + animatorBalance (../../sb/smart_billions.sol#426)
	- walletBalance += investing / 10 (../../sb/smart_billions.sol#413)
	- walletBalance += (investing * 5 / 100) * 2 (../../sb/smart_billions.sol#416)
	- wallets[owner].balance += uint208(investing / 10) (../../sb/smart_billions.sol#414)
	- wallets[owner].balance += uint208(investing * 5 / 100) (../../sb/smart_billions.sol#417)
	- wallets[_partner].balance += uint208(investing * 5 / 100) (../../sb/smart_billions.sol#418)
	- wallets[msg.sender].lastDividendPeriod = uint16(dividendPeriod) (../../sb/smart_billions.sol#419)
	Event emitted after the call(s):
	- LogInvestment(msg.sender,_partner,investing) (../../sb/smart_billions.sol#430)
	- Transfer(address(0),msg.sender,senderBalance) (../../sb/smart_billions.sol#427)
	- Transfer(address(0),owner,ownerBalance) (../../sb/smart_billions.sol#428)
	- Transfer(address(0),animator,animatorBalance) (../../sb/smart_billions.sol#429)
Reentrancy in SmartBillions.pay(uint256) (../../sb/smart_billions.sol#369-384):
	External calls:
	- msg.sender.transfer(_amount) (../../sb/smart_billions.sol#372)
	State variables written after the call(s):
	- houseKeeping() (../../sb/smart_billions.sol#374)
		- dividendPeriod ++ (../../sb/smart_billions.sol#349)
	- houseKeeping() (../../sb/smart_billions.sol#374)
		- dividends.push(0) (../../sb/smart_billions.sol#346)
	- houseKeeping() (../../sb/smart_billions.sol#374)
		- investStart = 0 (../../sb/smart_billions.sol#340)
Reentrancy in SmartBillions.playSystem(uint256,address) (../../sb/smart_billions.sol#633-664):
	External calls:
	- won() (../../sb/smart_billions.sol#634)
		- msg.sender.transfer(_amount) (../../sb/smart_billions.sol#372)
		- msg.sender.transfer(maxpay) (../../sb/smart_billions.sol#382)
	State variables written after the call(s):
	- bets[msg.sender] = Bet({value:uint192(msg.value),betHash:uint32(bethash),blockNum:uint32(hashNext)}) (../../sb/smart_billions.sol#659)
	- dividends[dividendPeriod] += msg.value / 20 (../../sb/smart_billions.sol#639)
	- hashBetSum = msg.value (../../sb/smart_billions.sol#648)
	- hashBetSum = msg.value (../../sb/smart_billions.sol#653)
	- hashBetSum += msg.value (../../sb/smart_billions.sol#656)
	- putHash() (../../sb/smart_billions.sol#662)
		- hashLast = lastb + 10 (../../sb/smart_billions.sol#754)
	- hashNext = block.number + 3 (../../sb/smart_billions.sol#647)
	- hashNext ++ (../../sb/smart_billions.sol#652)
	- putHash() (../../sb/smart_billions.sol#662)
		- hashes[delta % hashesSize] = calcHashes(uint32(lastb),uint32(delta)) (../../sb/smart_billions.sol#753)
	- walletBalance += fee (../../sb/smart_billions.sol#643)
	- wallets[_partner].balance += uint208(fee) (../../sb/smart_billions.sol#644)
	Event emitted after the call(s):
	- LogBet(msg.sender,uint256(bethash),hashNext,msg.value) (../../sb/smart_billions.sol#660)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4

SmartBillions.betPrize(SmartBillions.Bet,uint24) (../../sb/smart_billions.sol#482-508) uses literals with too many digits:
	- (uint256(_player.value) * 7000000) (../../sb/smart_billions.sol#493)
SmartBillions.betPrize(SmartBillions.Bet,uint24) (../../sb/smart_billions.sol#482-508) uses literals with too many digits:
	- (hit & 0xF00000) == 0 (../../sb/smart_billions.sol#485-491)
SmartBillions.betOf(address) (../../sb/smart_billions.sol#513-535) uses literals with too many digits:
	- hash == 0x1000000 (../../sb/smart_billions.sol#527)
SmartBillions.won() (../../sb/smart_billions.sol#540-591) uses literals with too many digits:
	- hash == 0x1000000 (../../sb/smart_billions.sol#566)
SmartBillions.getHash(uint256) (../../sb/smart_billions.sol#722-730) uses literals with too many digits:
	- (0x1000000) (../../sb/smart_billions.sol#726)
SmartBillions.slitherConstructorVariables() (../../sb/smart_billions.sol#118-771) uses literals with too many digits:
	- investBalanceMax = 200000000000000000000000 (../../sb/smart_billions.sol#144)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits

Loop condition n < hashes.length (../../sb/smart_billions.sol#681) should use cached array length instead of referencing `length` member of the storage array.
 Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#cache-array-length

SmartBillions.investBalanceMax (../../sb/smart_billions.sol#144) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant
/sb/smart_billions.sol analyzed (6 contracts with 93 detectors), 79 result(s) found
